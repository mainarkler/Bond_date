import streamlit as st
import pandas as pd
import requests
import time
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
from io import BytesIO, StringIO
import os
import csv
import re

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="–†–ï–ü–û –ø—Ä–µ—Ç—Ä–µ–π–¥ risc's", page_icon="üìà", layout="wide")
st.title("üìà –†–ï–ü–û –ø—Ä–µ—Ç—Ä–µ–π–¥")

# === Session state ===
if "results" not in st.session_state:
    st.session_state["results"] = None
if "file_loaded" not in st.session_state:
    st.session_state["file_loaded"] = False
if "last_file_name" not in st.session_state:
    st.session_state["last_file_name"] = None

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –†–ï–ü–û ===
st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –†–ï–ü–û")

if "overnight" not in st.session_state:
    st.session_state["overnight"] = False
if "extra_days" not in st.session_state:
    st.session_state["extra_days"] = 2

if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É"):
    st.session_state["overnight"] = False
    st.session_state["extra_days"] = 2
    st.session_state["results"] = None
    st.session_state["file_loaded"] = False
    st.session_state["last_file_name"] = None
    st.rerun()

overnight = st.checkbox("Overnight –†–ï–ü–û", key="overnight")

extra_days_input = st.number_input(
    "–î–Ω–µ–π –†–ï–ü–û:",
    min_value=2,
    max_value=366,
    step=1,
    disabled=st.session_state["overnight"],
    key="extra_days",
)

if st.session_state["overnight"]:
    st.markdown("<span style='color:gray'>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º Overnight</span>", unsafe_allow_html=True)

days_threshold = 3 if st.session_state["overnight"] else 1 + st.session_state["extra_days"]
st.write(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–ø–ª–∞—Ç: {days_threshold} –¥–Ω.")

# === –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ CSV ===
def safe_read_csv(path):
    if not os.path.exists(path):
        st.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return pd.DataFrame()

    try:
        with open(path, "r", encoding="utf-8-sig") as f:
            content = f.read().replace('"', '').replace("'", "").strip()

        sample = content[:2048]
        try:
            dialect = csv.Sniffer().sniff(sample, delimiters=[",", ";", "\t"])
            sep = dialect.delimiter
        except Exception:
            sep = ","

        df = pd.read_csv(StringIO(content), sep=sep, dtype=str)
        df.columns = [c.strip().upper() for c in df.columns]
        return df

    except Exception as e:
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {os.path.basename(path)}: {e}")
        return pd.DataFrame()

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ ===
EMITTER_FILE = "https://raw.githubusercontent.com/mainarkler/Bond_date/main/Pifagr_name_with_emitter.csv"
RATING_FILE = r"C:\Desktop\code\App\scor.csv"

df_emitters = pd.read_csv(EMITTER_FILE)
df_rating = safe_read_csv(RATING_FILE)

if not df_rating.empty:
    rating_col = next((c for c in df_rating.columns if "RATING" in c.upper()), None)
    issuer_col = next((c for c in df_rating.columns if "ISSUER" in c.upper()), None)
    if rating_col and issuer_col:
        df_rating = df_rating.rename(columns={rating_col: "RATING", issuer_col: "ISSUER"})
        df_rating["RATING"] = pd.to_numeric(df_rating["RATING"], errors="coerce")
    else:
        df_rating = pd.DataFrame(columns=["ISSUER", "RATING"])
else:
    df_rating = pd.DataFrame(columns=["ISSUER", "RATING"])

# === MOEX API ===
session = requests.Session()
session.headers.update({"User-Agent": "python-requests/iss-moex-emitter-id-script"})

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –û–§–ó —Å –¥–æ—Å–∫–∏ TQOB (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è) ===
@st.cache_data(show_spinner=False)
def load_tqob_securities():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç securities.xml —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å–∫–∏ TQOB (–û–§–ó).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ SECID –∏ ISIN.
    """
    board = "TQOB"
    combined = []
    try:
        url = f"https://iss.moex.com/iss/engines/stock/markets/bonds/boards/{board}/securities.xml?iss.meta=off"
        r = session.get(url, timeout=20)
        r.raise_for_status()
        root = ET.fromstring(r.content)
        for row in root.findall(".//row"):
            secid = row.attrib.get("secid")
            isin = row.attrib.get("isin")
            if secid and isin:
                combined.append({"SECID": secid, "ISIN": isin})
    except Exception as e:
        # –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π DF –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TQOB: {e}")
    df_tqob = pd.DataFrame(combined).drop_duplicates(subset=["ISIN"])
    return df_tqob

df_tqob = load_tqob_securities()

# === –ü–æ–∏—Å–∫ SECID: —Å–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ /iss/securities.json (–∫–∞–∫ —Ä–∞–Ω—å—à–µ), –∑–∞—Ç–µ–º —Ä–µ–∑–µ—Ä–≤ ‚Äî TQOB ===
def fetch_secid_general(isin: str):
    """
    –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ SECID —á–µ—Ä–µ–∑ /iss/securities.json?q=ISIN
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SECID –∏–ª–∏ None
    """
    isin = isin.strip().upper()
    try:
        url = f"https://iss.moex.com/iss/securities.json?q={isin}&iss.meta=off"
        r = session.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        securities = data.get("securities", {})
        columns = securities.get("columns", [])
        data_rows = securities.get("data", [])
        if not data_rows:
            return None
        df = pd.DataFrame(data_rows, columns=columns)
        # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –±–µ–∑ ISIN/SECID, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if "ISIN" in df.columns and "SECID" in df.columns:
            match = df[df["ISIN"].str.upper() == isin]
            if not match.empty:
                return match.iloc[0]["SECID"]
        # –µ—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ ISIN –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π SECID –∏–∑ —Å–ø–∏—Å–∫–∞
        if "SECID" in df.columns and not df.empty:
            return df.iloc[0]["SECID"]
    except Exception:
        pass
    return None

def fetch_secid_from_tqob(isin: str):
    """
    –ò—â–µ—Ç SECID –≤ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ TQOB (–¥–ª—è –û–§–ó).
    """
    isin = isin.strip().upper()
    if df_tqob.empty:
        return None
    match = df_tqob[df_tqob["ISIN"].str.upper() == isin]
    if not match.empty:
        return match.iloc[0]["SECID"]
    return None

def fetch_secid_by_isin(isin: str):
    """
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ SECID:
    1) –û–±—â–∏–π –ø–æ–∏—Å–∫ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ‚Äî –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤.
    2) –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤ TQOB (–û–§–ó).
    """
    # 1) –æ–±—â–∏–π –ø–æ–∏—Å–∫
    secid = fetch_secid_general(isin)
    if secid:
        return secid, "general"
    # 2) –ø–æ–∏—Å–∫ –≤ TQOB
    secid_tqob = fetch_secid_from_tqob(isin)
    if secid_tqob:
        return secid_tqob, "tqob"
    return None, None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ emitter_id (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
def fetch_emitter_id(secid: str):
    secid = str(secid).strip()
    if not secid:
        return None
    try:
        url = f"https://iss.moex.com/iss/securities/{secid}.json"
        r = session.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        securities = data.get("securities", {})
        cols = securities.get("columns", [])
        rows = securities.get("data", [])
        if rows:
            for i, c in enumerate(cols):
                if c.upper() == "EMITTER_ID":
                    return rows[0][i]
    except Exception:
        pass
    try:
        url = f"https://iss.moex.com/iss/securities/{secid}.xml?iss.meta=off"
        r = session.get(url, timeout=10)
        r.raise_for_status()
        root = ET.fromstring(r.content)
        for row in root.iter():
            name_attr = row.attrib.get("name") or row.attrib.get("NAME")
            if name_attr and name_attr.upper() == "EMITTER_ID":
                return row.attrib.get("value") or row.attrib.get("VALUE")
    except Exception:
        pass
    return None

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ ISIN ===
def get_bond_data(isin):
    try:
        secid, source = fetch_secid_by_isin(isin)
        if not secid:
            st.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω SECID –¥–ª—è {isin}")
            return None

        emitter_id = fetch_emitter_id(secid)
        emitter_name = None

        if emitter_id and not df_emitters.empty:
            match = df_emitters[df_emitters["EMITTER_ID"] == str(emitter_id)]
            if not match.empty and "ISSUER" in match.columns:
                emitter_name = match.iloc[0]["ISSUER"]

        # --- –†–µ–π—Ç–∏–Ω–≥ ---
        rating = None
        if emitter_name and not df_rating.empty:
            match_r = df_rating[
                df_rating["ISSUER"].str.strip().str.lower() == emitter_name.strip().lower()
            ]
            if not match_r.empty:
                rating = match_r.iloc[0]["RATING"]

        # --- –õ–∏–º–∏—Ç ---
        def calc_limit(emitter_name, rating):
            if not emitter_name:
                return "0%"
            if "–ú–ò–ù–§–ò–ù –†–û–°–°–ò–ò" in emitter_name.upper():
                return "100%"
            try:
                r = float(rating)
                if r <= 12:
                    return "25%"
                elif 13 <= r < 18:
                    return "15%"
                else:
                    return "0%"
            except Exception:
                return "0%"

        limit = calc_limit(emitter_name, rating)

        # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É–º–∞–≥–µ ---
        secname = maturity_date = put_date = call_date = None

        # –ï—Å–ª–∏ –±—É–º–∞–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—â–∏–º —Å–ø–æ—Å–æ–±–æ–º (–∫–æ—Ä–ø./–ø—Ä–æ—á–∏–µ) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–∂–Ω—é—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è info
        if source == "general":
            url_info = f"https://iss.moex.com/iss/engines/stock/markets/bonds/securities/{secid}.json"
            try:
                response_info = requests.get(url_info, timeout=10)
                if response_info.status_code == 200:
                    data_info = response_info.json()
                    rows_info = data_info.get("securities", {}).get("data", [])
                    cols_info = data_info.get("securities", {}).get("columns", [])
                    if rows_info:
                        info = dict(zip(cols_info, rows_info[0]))
                        secname = info.get("SECNAME")
                        maturity_date = info.get("MATDATE")
                        put_date = info.get("PUTOPTIONDATE")
                        call_date = info.get("CALLOPTIONDATE")
            except Exception:
                pass

            # --- –ö—É–ø–æ–Ω—ã (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ / –æ–±—â–∏–π –ø—É—Ç—å) ---
            record_date = coupon_date = None
            try:
                url_coupons = f"https://iss.moex.com/iss/statistics/engines/stock/markets/bonds/bondization/{secid}.json?iss.only=coupons&iss.meta=off"
                response_coupons = requests.get(url_coupons, timeout=10)
                response_coupons.raise_for_status()
                data_coupons = response_coupons.json()
                coupons = data_coupons.get("coupons", {}).get("data", [])
                columns_coupons = data_coupons.get("coupons", {}).get("columns", [])
                if coupons:
                    df_coupons = pd.DataFrame(coupons, columns=columns_coupons)
                    today = pd.to_datetime(datetime.today().date())

                    def next_date(col):
                        if col in df_coupons:
                            future = pd.to_datetime(df_coupons[col], errors="coerce")
                            future = future[future >= today]
                            return future.min() if not future.empty else None
                        return None

                    record_date = next_date("recorddate")
                    coupon_date = next_date("coupondate")
                else:
                    record_date = coupon_date = None
            except Exception:
                record_date = coupon_date = None

        # –ï—Å–ª–∏ –±—É–º–∞–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ TQOB (–û–§–ó) ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º info –∏ coupons (–¥—É–±–ª–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        elif source == "tqob":
            # info –¥–ª—è TQOB (—Ç–æ—Ç –∂–µ endpoint, –Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ ‚Äî —á—Ç–æ–±—ã –±—ã–ª–æ —è–≤–Ω–æ)
            try:
                url_info = f"https://iss.moex.com/iss/engines/stock/markets/bonds/securities/{secid}.json"
                response_info = requests.get(url_info, timeout=10)
                if response_info.status_code == 200:
                    data_info = response_info.json()
                    rows_info = data_info.get("securities", {}).get("data", [])
                    cols_info = data_info.get("securities", {}).get("columns", [])
                    if rows_info:
                        info = dict(zip(cols_info, rows_info[0]))
                        secname = info.get("SECNAME")
                        maturity_date = info.get("MATDATE")
                        put_date = info.get("PUTOPTIONDATE")
                        call_date = info.get("CALLOPTIONDATE")
            except Exception:
                pass

            # –∫—É–ø–æ–Ω—ã –¥–ª—è TQOB (–æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ ‚Äî —Ç–æ–∂–µ —Ç–æ—Ç –∂–µ endpoint, –Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
            record_date = coupon_date = None
            try:
                url_coupons = f"https://iss.moex.com/iss/statistics/engines/stock/markets/bonds/bondization/{secid}.json?iss.only=coupons&iss.meta=off"
                response_coupons = requests.get(url_coupons, timeout=10)
                response_coupons.raise_for_status()
                data_coupons = response_coupons.json()
                coupons = data_coupons.get("coupons", {}).get("data", [])
                columns_coupons = data_coupons.get("coupons", {}).get("columns", [])
                if coupons:
                    df_coupons = pd.DataFrame(coupons, columns=columns_coupons)
                    today = pd.to_datetime(datetime.today().date())

                    def next_date(col):
                        if col in df_coupons:
                            future = pd.to_datetime(df_coupons[col], errors="coerce")
                            future = future[future >= today]
                            return future.min() if not future.empty else None
                        return None

                    record_date = next_date("recorddate")
                    coupon_date = next_date("coupondate")
                else:
                    record_date = coupon_date = None
            except Exception:
                record_date = coupon_date = None

        else:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ source –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω (—Ö–æ—Ç—è –¥–æ —Å—é–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ—Ö–æ–¥–∏—Ç—å)
            secname = maturity_date = put_date = call_date = None
            record_date = coupon_date = None

        # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
        def fmt(date):
            if pd.isna(date) or not date:
                return None
            try:
                return pd.to_datetime(date).strftime("%Y-%m-%d")
            except Exception:
                return None

        return {
            "ISIN": isin,
            "SECID": secid,
            "–ò—Å—Ç–æ—á–Ω–∏–∫ SECID": source,
            "–ö–æ–¥ —ç–º–∏—Ç–µ–Ω—Ç–∞": emitter_id,
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç–º–∏—Ç–µ–Ω—Ç–∞": emitter_name,
            "–†–µ–π—Ç–∏–Ω–≥": rating,
            "–õ–∏–º–∏—Ç": limit,
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞": secname,
            "–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è": fmt(maturity_date),
            "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Put": fmt(put_date),
            "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Call": fmt(call_date),
            "–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞": fmt(record_date),
            "–î–∞—Ç–∞ –∫—É–ø–æ–Ω–∞": fmt(coupon_date),
        }

    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {isin}: {e}")
        return None

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞ ===
st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ ISIN")
tab1, tab2 = st.tabs(["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"])

with tab1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π ISIN:", type=["xlsx", "xls", "csv"])

with tab2:
    isin_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ ISIN-—ã (—á–µ—Ä–µ–∑ Enter, –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):",
        placeholder="ISINs",
        height=150
    )
    if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º ISIN"):
        raw_text = isin_input.strip()
        if raw_text:
            isins = re.split(r"[\s,;]+", raw_text)
            isins = [i.strip().upper() for i in isins if i.strip()]
            results = []
            progress_bar = st.progress(0)
            for idx, isin in enumerate(isins, start=1):
                data = get_bond_data(isin)
                if data:
                    results.append(data)
                progress_bar.progress(idx / len(isins))
                time.sleep(0.1)
            st.session_state["results"] = pd.DataFrame(results)
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ===
if uploaded_file:
    if not st.session_state["file_loaded"] or uploaded_file.name != st.session_state["last_file_name"]:
        st.session_state["file_loaded"] = True
        st.session_state["last_file_name"] = uploaded_file.name
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file, dtype=str)
        else:
            df = pd.read_excel(uploaded_file, dtype=str)
        if "ISIN" not in df.columns:
            st.error("‚ùå –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'ISIN'.")
            st.stop()
        isins = df["ISIN"].dropna().unique().tolist()
        results = []
        progress_bar = st.progress(0)
        for idx, isin in enumerate(isins, start=1):
            data = get_bond_data(isin)
            if data:
                results.append(data)
            progress_bar.progress(idx / len(isins))
            time.sleep(0.1)
        st.session_state["results"] = pd.DataFrame(results)
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞!")

# === –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è ===
def style_df(row):
    if (pd.isna(row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"]) or row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"] in [None, "None", ""]):
        return ["background-color: DimGray; color: white"] * len(row)
    today = datetime.today().date()
    danger_threshold = today + timedelta(days=days_threshold)
    key_dates = ["–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è", "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Put", "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Call", "–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞", "–î–∞—Ç–∞ –∫—É–ø–æ–Ω–∞"]
    colors = ["" for _ in row]
    for i, col in enumerate(row.index):
        if col in key_dates and pd.notnull(row[col]):
            try:
                d = pd.to_datetime(row[col]).date()
                if d <= danger_threshold:
                    colors[i] = "background-color: Chocolate"
            except:
                pass
    if any(c == "background-color: Chocolate" for c in colors):
        colors = ["background-color: SandyBrown" if c == "" else c for c in colors]
    return colors

# === –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
if st.session_state["results"] is not None:
    df_res = st.session_state["results"]
    st.dataframe(df_res.style.apply(style_df, axis=1), use_container_width=True)

    def to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="–î–∞–Ω–Ω—ã–µ")
        return output.getvalue()

    st.download_button(
        label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Excel)",
        data=to_excel(df_res),
        file_name="bond_data_with_limits.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ISIN-—ã –≤—Ä—É—á–Ω—É—é.")
