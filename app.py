import streamlit as st
import pandas as pd
import httpx
import asyncio
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
from io import BytesIO
import re

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="–†–ï–ü–û –ø—Ä–µ—Ç—Ä–µ–π–¥", page_icon="üìà", layout="wide")
st.title("üìà –†–ï–ü–û –ø—Ä–µ—Ç—Ä–µ–π–¥")

# === Session state ===
if "results" not in st.session_state:
    st.session_state["results"] = None
if "file_loaded" not in st.session_state:
    st.session_state["file_loaded"] = False
if "last_file_name" not in st.session_state:
    st.session_state["last_file_name"] = None

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –†–ï–ü–û ===
st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –†–ï–ü–û")
if "overnight" not in st.session_state:
    st.session_state["overnight"] = False
if "extra_days" not in st.session_state:
    st.session_state["extra_days"] = 2

if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É"):
    st.session_state.update({
        "overnight": False,
        "extra_days": 2,
        "results": None,
        "file_loaded": False,
        "last_file_name": None
    })
    st.rerun()

overnight = st.checkbox("Overnight –†–ï–ü–û", key="overnight")
extra_days_input = st.number_input(
    "–î–Ω–µ–π –†–ï–ü–û:", min_value=2, max_value=366, step=1,
    disabled=overnight, key="extra_days"
)
days_threshold = 2 if overnight else 1 + st.session_state["extra_days"]
st.write(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–ø–ª–∞—Ç: {days_threshold} –¥–Ω.")

# === –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ TQOB XML ===
@st.cache_data(ttl=3600)
def fetch_tqob_xml():
    url_tqob = "https://iss.moex.com/iss/engines/stock/markets/bonds/boards/TQOB/securities.xml?iss.meta=off"
    r = httpx.get(url_tqob, timeout=20)
    r.raise_for_status()
    return ET.fromstring(r.content)

tqob_root = fetch_tqob_xml()

# === –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–∏—Ç–µ–Ω—Ç–æ–≤ –∏ secid –ø–æ ISIN ===
@st.cache_data(ttl=3600)
def fetch_emitter_and_secid(isin: str):
    isin = str(isin).strip()
    if not isin:
        return None, None

    emitter_id = None
    secid = None

    # JSON –∑–∞–ø—Ä–æ—Å
    try:
        url = f"https://iss.moex.com/iss/securities/{isin}.json"
        r = httpx.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        securities = data.get("securities", {})
        cols = securities.get("columns", [])
        rows = securities.get("data", [])
        if rows:
            for i, c in enumerate(cols):
                if c.upper() == "EMITTER_ID":
                    emitter_id = rows[0][i]
                if c.upper() == "SECID":
                    secid = rows[0][i]
    except:
        pass

    # XML –∑–∞–ø—Ä–æ—Å
    if not emitter_id or not secid:
        try:
            url = f"https://iss.moex.com/iss/securities/{isin}.xml?iss.meta=off"
            r = httpx.get(url, timeout=10)
            r.raise_for_status()
            root = ET.fromstring(r.content)
            for row in root.iter():
                name_attr = row.attrib.get("name") or row.attrib.get("NAME")
                if name_attr:
                    if name_attr.upper() == "EMITTER_ID" and not emitter_id:
                        emitter_id = row.attrib.get("value") or row.attrib.get("VALUE")
                    if name_attr.upper() == "SECID" and not secid:
                        secid = row.attrib.get("value") or row.attrib.get("VALUE")
        except:
            pass

    # TQOB –¥–ª—è –û–§–ó
    if not secid or not emitter_id:
        for row in tqob_root.iter("row"):
            if row.attrib.get("isin") == isin:
                if not secid:
                    secid = row.attrib.get("secid") or row.attrib.get("SECID")
                if not emitter_id:
                    emitter_id = row.attrib.get("emitterid") or row.attrib.get("EMITTERID")

    return emitter_id, secid

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ISIN ===
async def get_bond_data_async(isin):
    emitter_id, secid = fetch_emitter_and_secid(isin)
    if not secid:
        return {"ISIN": isin}

    result = {"ISIN": isin, "–ö–æ–¥ —ç–º–∏—Ç–µ–Ω—Ç–∞": emitter_id}
    try:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É–º–∞–≥–µ
        url_info = f"https://iss.moex.com/iss/engines/stock/markets/bonds/securities/{secid}.json"
        r = httpx.get(url_info, timeout=10)
        if r.status_code == 200:
            data_info = r.json()
            rows_info = data_info.get("securities", {}).get("data", [])
            cols_info = data_info.get("securities", {}).get("columns", [])
            if rows_info:
                info = dict(zip(cols_info, rows_info[0]))
                result.update({
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞": info.get("SECNAME"),
                    "–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è": info.get("MATDATE"),
                    "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Put": info.get("PUTOPTIONDATE"),
                    "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Call": info.get("CALLOPTIONDATE")
                })
        # –ö—É–ø–æ–Ω—ã
        url_coupons = f"https://iss.moex.com/iss/statistics/engines/stock/markets/bonds/bondization/{secid}.json?iss.only=coupons&iss.meta=off"
        r = httpx.get(url_coupons, timeout=10)
        r.raise_for_status()
        data_coupons = r.json().get("coupons", {})
        df_coupons = pd.DataFrame(data_coupons.get("data", []), columns=data_coupons.get("columns", []))
        today = pd.to_datetime(datetime.today().date())
        for col in ["recorddate", "coupondate"]:
            if col in df_coupons:
                future = pd.to_datetime(df_coupons[col], errors="coerce")
                future = future[future >= today]
                result[f"–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞" if col=="recorddate" else f"–î–∞—Ç–∞ –∫—É–ø–æ–Ω–∞"] = future.min() if not future.empty else None
    except:
        pass

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    for key in ["–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è", "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Put", "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Call", "–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞", "–î–∞—Ç–∞ –∫—É–ø–æ–Ω–∞"]:
        if key in result and result[key]:
            try:
                result[key] = pd.to_datetime(result[key]).strftime("%Y-%m-%d")
            except:
                result[key] = None
    return result

async def fetch_isins_async(isins):
    tasks = [get_bond_data_async(isin) for isin in isins]
    return await asyncio.gather(*tasks)

def fetch_isins_parallel(isins):
    return asyncio.run(fetch_isins_async(isins))

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞ ===
st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ ISIN")
tab1, tab2 = st.tabs(["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"])

uploaded_file = None
isin_input = ""

with tab1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π ISIN", type=["xlsx", "xls", "csv"])
    if uploaded_file:
        if not st.session_state["file_loaded"] or uploaded_file.name != st.session_state["last_file_name"]:
            st.session_state["file_loaded"] = True
            st.session_state["last_file_name"] = uploaded_file.name
            if uploaded_file.name.endswith(".csv"):
                df = pd.read_csv(uploaded_file, usecols=["ISIN"], dtype=str)
            else:
                df = pd.read_excel(uploaded_file, usecols=["ISIN"], dtype=str)
            isins = df["ISIN"].dropna().unique().tolist()
            st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(isins)} ISIN")
            if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ISIN –∏–∑ —Ñ–∞–π–ª–∞"):
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                    results = fetch_isins_parallel(isins)
                    st.session_state["results"] = pd.DataFrame(results)
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")

with tab2:
    isin_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ ISIN (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é)", height=150)
    if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º ISIN"):
        raw_text = isin_input.strip()
        if raw_text:
            isins = [i.strip().upper() for i in re.split(r"[\s,;]+", raw_text) if i.strip()]
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                results = fetch_isins_parallel(isins)
                st.session_state["results"] = pd.DataFrame(results)
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")

# === –ü–æ–¥–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —ç–º–∏—Ç–µ–Ω—Ç–æ–≤ ===
@st.cache_data(ttl=86400)
def fetch_emitter_names():
    url = "https://raw.githubusercontent.com/mainarkler/Bond_date/refs/heads/main/Pifagr_name_with_emitter.csv"
    try:
        df_emitters = pd.read_csv(url, dtype=str)
        df_emitters.columns = [c.strip() for c in df_emitters.columns]
        return df_emitters
    except:
        return pd.DataFrame(columns=["Issuer", "EMITTER_ID"])

df_emitters = fetch_emitter_names()

# === –í–µ–∫—Ç–æ—Ä–Ω–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è DataFrame ===
def style_df_vectorized(df):
    today = pd.to_datetime(datetime.today().date())
    danger_threshold = today + pd.to_timedelta(days_threshold, unit="d")
    key_dates = ["–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è", "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Put", "–î–∞—Ç–∞ –æ—Ñ–µ—Ä—Ç—ã Call", "–î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞", "–î–∞—Ç–∞ –∫—É–ø–æ–Ω–∞"]
    styles = pd.DataFrame("", index=df.index, columns=df.columns)
    for col in key_dates:
        if col in df:
            mask = pd.to_datetime(df[col], errors="coerce") <= danger_threshold
            styles.loc[mask, col] = "background-color: Chocolate"
    return styles

# === –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
if st.session_state["results"] is not None:
    df_res = st.session_state["results"]
    if not df_emitters.empty:
        df_res = df_res.merge(df_emitters, how="left", left_on="–ö–æ–¥ —ç–º–∏—Ç–µ–Ω—Ç–∞", right_on="EMITTER_ID")
        df_res["–≠–º–∏—Ç–µ–Ω—Ç"] = df_res["Issuer"]
        df_res.drop(columns=["Issuer", "EMITTER_ID"], inplace=True, errors="ignore")
        cols = df_res.columns.tolist()
        if "–≠–º–∏—Ç–µ–Ω—Ç" in cols and "–ö–æ–¥ —ç–º–∏—Ç–µ–Ω—Ç–∞" in cols:
            cols.remove("–≠–º–∏—Ç–µ–Ω—Ç")
            idx = cols.index("–ö–æ–¥ —ç–º–∏—Ç–µ–Ω—Ç–∞")
            cols.insert(idx + 1, "–≠–º–∏—Ç–µ–Ω—Ç")
            df_res = df_res[cols]
        st.session_state["results"] = df_res

    st.dataframe(df_res.style.apply(style_df_vectorized, axis=None), use_container_width=True)

    def to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="–î–∞–Ω–Ω—ã–µ")
        return output.getvalue()

    st.download_button(
        label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Excel)",
        data=to_excel(df_res),
        file_name="bond_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ISIN-—ã –≤—Ä—É—á–Ω—É—é.")
